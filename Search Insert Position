class Solution(object):
    def searchInsert(self, nums, target):
        """
        :type nums: List[int]
        :type target: int
        :rtype: int
        """
        # edge cases:
        if target > nums[-1]: return len(nums)
        if target < nums[0] or not nums: return 0
        if len(nums) == 1: return 0
    
        # pick middle value to compare against
        middle = int((len(nums)-1)/2)
        middle_num = nums[middle]
        
        # binary search recursion
        # target is in smaller half
        if middle_num > target:
            return self.searchInsert(nums[0:middle+1], target)
        
        # target is in larger half
        elif middle_num < target:
            return middle+1 + self.searchInsert(nums[middle+1:], target)
        
        # target is middle value
        else:
            return middle
