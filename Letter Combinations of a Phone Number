# Solution 1
nums = {'2': "abc",
                '3': "def",
                '4': "ghi",
                '5': "jkl",
                '6': "mno",
                '7': "pqrs",
                '8': "tuv",
                "9": "wxyz"}

digits="23"
res= []

def backtrack(i, curr):
    if len(curr)==len(digits):
        res.append(curr)
        return

    for letter in nums[digits[i]]:
        backtrack(i+1, curr+letter)

backtrack(0,"")
print(res)



------

# Solution 2

class Solution(object):
    def letterCombinations(self, digits):
        """
        :type digits: str
        :rtype: List[str]
        """
        if not digits: return []

        numbers = {'2': "abc",
                '3': "def",
                '4': "ghi",
                '5': "jkl",
                '6': "mno",
                '7': "pqrs",
                '8': "tuv",
                "9": "wxyz"}
        
        result = []

        def dfs(seq, current):                  
            if not seq:                         # if sequence become empty, 
                result.append(current)          # - append the current combination
                return

            for letter in numbers[seq[0]]:         
                dfs(seq[1:], current+letter)    

        dfs(digits, "")                         
        return result

        
