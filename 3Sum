class Solution(object):
    def threeSum(self, nums):
        """
        :type nums: List[int]
        :rtype: List[List[int]]
        """
        
        nums.sort()
        target = 0
        new_l = []

        for i in range(len(nums)-2):
            rest = target - nums[i]
            l, h = i+1, len(nums) - 1

            while l < h:
                pair = nums[l] + nums[h]
                if pair == rest:
                    res = [nums[i], nums[l], nums[h]]
                    if res not in new_l:
                        new_l.append(res)

                    #pass duplicates
                    while l < h and nums[l] == nums[l+1]:
                        l += 1
                    while l < h and nums[h] == nums[h-1]:
                        h -= 1
                    l+=1
                    h-=1
                
                elif pair < rest:
                    l += 1
                else:
                    h -= 1
                    
class Solution:
    def threeSum(self, nums: List[int]) -> List[List[int]]:
        n=len(nums)
        a=[]
        nums.sort()
        for i in range(n):
            if i>0 and nums[i]==nums[i-1]:
                continue
            l,r = i+1, n-1
            while l<r:
                s=nums[i]+nums[l]+nums[r]
                if s>0:
                    r-=1
                elif s<0:
                    l+=1
                else:
                    b=[nums[i],nums[l],nums[r]]
                    if b not in a:
                        a.append(b)
                    l+=1               
        return a
        return new_l





